#############################################################
######################gen verilog############################
#############################################################
############gen PUF
######
set fout [ open "$FOLDER_SOURCES/new/MOD_BLOCK.v" w ]
puts $fout "module MOD_BLOCK"
puts $fout "("
puts $fout "  input  IN,"
puts $fout "  input  S,"
puts $fout "  output OUT"
puts $fout ");"
puts $fout ""
puts $fout "(* dont_touch = \"true\" *) LUT6 #(.INIT(8'b11001010)) mux(.I0(IN), .I1(IN), .I2(S), .I3(1'b0), .I4(1'b0), .I5(1'b0), .O(OUT));"
puts $fout ""
puts $fout "endmodule"
close $fout
######
set fout [ open "$FOLDER_SOURCES/new/MOD_PATH.v" w ]
puts $fout "module MOD_PATH"
puts $fout "("
puts $fout "  input IN,"
puts $fout "  input [$CHPORT:0]CH,"
puts $fout "  input [$ADJPORT:0]ADJ,"
puts $fout "  output OUT"
puts $fout  ");"
puts $fout ""
puts $fout "genvar i;"
puts $fout ""
puts $fout "wire [$CHBIT:0]chblock_wire;"
puts $fout "assign chblock_wire[0]=IN;"
puts $fout "generate"
puts $fout "for (i=0;i<$CHBIT;i=i+1)"
puts $fout "begin"
puts $fout "  (* dont_touch = \"true\" *) MOD_BLOCK chblock(chblock_wire\[i\],CH\[i\],chblock_wire\[i+1\]);"
puts $fout "end"
puts $fout "endgenerate"
puts $fout ""
puts $fout "wire [$ADJBIT:0]adjblock_wire;"
puts $fout "assign adjblock_wire[0]=chblock_wire[$CHBIT];"
puts $fout "generate"
puts $fout "for (i=0;i<$ADJBIT;i=i+1)"
puts $fout "begin"
puts $fout "  (* dont_touch = \"true\" *) MOD_BLOCK adjblock(adjblock_wire\[i\],ADJ\[i\],adjblock_wire\[i+1\]);"
puts $fout "end"
puts $fout "endgenerate"
puts $fout "assign OUT=adjblock_wire[$ADJBIT];"
puts $fout ""
puts $fout "endmodule"
close $fout
######
set fout [ open "$FOLDER_SOURCES/new/MOD_ARBITER.v" w ]
puts $fout "module MOD_ARBITER"
puts $fout "("
puts $fout "  input  IN0,"
puts $fout "  input  IN1,"
puts $fout "  output OUT"
puts $fout  ");"
puts $fout ""
puts $fout "(* dont_touch = \"true\" *) FDCE #(.INIT(1'b0)) inst_RSP(.CE(1'b1), .CLR(1'b0), .C(IN1), .D(IN0), .Q(OUT));"
puts $fout ""
puts $fout "endmodule"
close $fout
######
set fout [ open "$FOLDER_SOURCES/new/MOD_APUF.v" w ]
puts $fout "module MOD_APUF"
puts $fout "("
puts $fout "  input IN,"
puts $fout "  input [$CHPORT:0]CH,"
puts $fout "  input [$ADJPORT:0]ADJ0,"
puts $fout "  input [$ADJPORT:0]ADJ1,"
puts $fout "  output RSP"
puts $fout  ");"
puts $fout ""
puts $fout "(* dont_touch = \"true\" *) wire transition_wire,path0_out,path1_out;"
puts $fout "(* dont_touch = \"true\" *) LUT6 #(.INIT(2'b10)) transition(.I0(IN), .I1(1'b0), .I2(1'b0), .I3(1'b0), .I4(1'b0), .I5(1'b0), .O(transition_wire));"
puts $fout "(* dont_touch = \"true\" *) MOD_PATH path0(transition_wire,CH,ADJ0,path0_out);"
puts $fout "(* dont_touch = \"true\" *) MOD_PATH path1(transition_wire,CH,ADJ1,path1_out);"
puts $fout "(* dont_touch = \"true\" *) MOD_ARBITER arbiter(path0_out,path1_out,RSP);"
puts $fout ""
puts $fout "endmodule"
close $fout
############gen LFSR
set fout [ open "$FOLDER_SOURCES/new/MOD_LFSR.v" w ]
puts $fout "module MOD_LFSR"
puts $fout "("
puts $fout "  input RST,"
puts $fout "  input GEN,"
puts $fout "  input [$CHPORT:0]SEED,"
puts $fout "  output reg [$CHPORT:0]OUT"
puts $fout  ");"
puts $fout ""
puts $fout "always @(posedge RST or posedge GEN)"
puts $fout "begin"
puts $fout "  if      (RST==1) OUT<=SEED;"
puts $fout "  else if (GEN==1)"
puts $fout "  begin"
set index 0
for {set i 0} {$i<=$CHPORT} {incr i} {
	set j  [expr $CHPORT-$i+1]
	set jj [expr $j-1]
	if {$j<=$CHPORT} {
		if {[string equal [string index $LFSR_CONFIG $index] "0"]} {
			puts $fout "    OUT\[$jj\] <= OUT\[$j\];"
		} else {
			puts $fout "    OUT\[$jj\] <= OUT\[$j\]^OUT[0];"
		}
	} else {
		if {[string equal [string index $LFSR_CONFIG $index] "0"]} {
			puts $fout "    OUT\[$CHPORT\] <= OUT\[0\];"
		} else {
			puts $fout "    OUT\[$CHPORT\] <= ~OUT\[0\];"
		}		
	}

	set index [expr $index+1];
	if {[string equal [string index $LFSR_CONFIG $index] "_"]} {
		set index [expr $index+1];
	}
}
puts $fout "  end"
puts $fout "end"
puts $fout ""
puts $fout "endmodule"
close $fout
############gen CH_CONTROL
set fout [ open "$FOLDER_SOURCES/new/MOD_CHCONTROL.v" w ]
puts $fout "module MOD_CHCONTROL"
puts $fout "("
puts $fout "  input CLK,"
puts $fout "  input RST,"
puts $fout "  input START,"
puts $fout "  output reg CH_GEN,"
puts $fout "  output reg TRANSITION,"
puts $fout "  output reg RSP_CAPTURE"
puts $fout  ");"
puts $fout ""
puts $fout "reg enable;"
puts $fout "wire control_clk;"
puts $fout "reg [$CHCONTROLPORT:0] control;"
puts $fout "always @(posedge RST or posedge START or posedge CLK)"
puts $fout "begin"
puts $fout "  if      (RST==1)          enable<=0;"
puts $fout "  else if (START==1)        enable<=1;"
puts $fout "end"
puts $fout "assign control_clk= CLK & enable;"
puts $fout ""
puts $fout "always @(posedge RST or posedge control_clk)"
puts $fout "begin"
puts $fout "  if      (RST==1)                 control<=0;"
puts $fout "  else if (control<$CYCLE_TOTAL-1) control<=control+1;"
puts $fout "  else                             control<=1;"
puts $fout "end"
puts $fout "always @(posedge RST or posedge CLK)"
puts $fout "begin"
puts $fout "  if      (RST==1)     CH_GEN<=0;"
puts $fout "  else if (control==1) CH_GEN<=1;"
puts $fout "  else                 CH_GEN<=0;"
puts $fout "end"
puts $fout "always @(posedge RST or posedge CLK)"
puts $fout "begin"
puts $fout "  if      (RST==1)                                              TRANSITION<=0;"
puts $fout "  else if (1+$CYCLE_CH<=control&&control<=$CYCLE_CH+$CYCLE_RSP) TRANSITION<=1;"
puts $fout "  else                                                          TRANSITION<=0;"
puts $fout "end"
puts $fout "always @(posedge RST or posedge CLK)"
puts $fout "begin"
puts $fout "  if      (RST==1)                          RSP_CAPTURE<=0;"
puts $fout "  else if (control==1+$CYCLE_CH+$CYCLE_RSP) RSP_CAPTURE<=1;"
puts $fout "  else                                      RSP_CAPTURE<=0;"
puts $fout "end"
puts $fout ""
puts $fout "endmodule"
close $fout
############gen RSP_CONTROL
set fout [ open "$FOLDER_SOURCES/new/MOD_RSPCONTROL.v" w ]
puts $fout "module MOD_RSPCONTROL"
puts $fout "("
puts $fout "  input RSP_CAPTURE,"
puts $fout "  input RSP,"
puts $fout "  output reg RSP_BUF"
puts $fout  ");"
puts $fout ""
puts $fout "always @(posedge RSP_CAPTURE) RSP_BUF<=RSP;"
puts $fout ""
puts $fout "endmodule"
close $fout
############gen buf_ch_adj
set fout [ open "$FOLDER_SOURCES/new/MOD_BUF_CH_ADJ.v" w ]
puts $fout "module MOD_BUF_CH_ADJ("
puts $fout "    input clk,"
puts $fout "    input [$CHPORT:0]ch,"
puts $fout "    input [$ADJPORT:0]adj0,"
puts $fout "    input [$ADJPORT:0]adj1,"
puts $fout "    output reg [$CHPORT:0]ch_buf,"
puts $fout "    output reg [$ADJPORT:0]adj0_buf,"
puts $fout "    output reg [$ADJPORT:0]adj1_buf"
puts $fout "    );"
puts $fout ""    
puts $fout "(* dont_touch = \"true\" *) always @(posedge clk) ch_buf<=ch;"
puts $fout "(* dont_touch = \"true\" *) always @(posedge clk) adj0_buf<=adj0;"
puts $fout "(* dont_touch = \"true\" *) always @(posedge clk) adj1_buf<=adj1;"
puts $fout ""
puts $fout "endmodule"
close $fout
############gen top module
set fout [ open "$FOLDER_SOURCES/new/MOD_HW.v" w ]
if {$IS_DIFFPOWER==1} {
	puts $fout "module MOD_HW"
	puts $fout "("
	puts $fout "  input CLK_P,"
	puts $fout "  input CLK_N"
	puts $fout ");"
	puts $fout ""
	puts $fout "(* dont_touch=\"true\" *) wire clk;"
	puts $fout "IBUFDS #"
	puts $fout "("
	puts $fout "  .DIFF_TERM(\"FALSE\"),"
	puts $fout "  .IBUF_LOW_PWR(\"FALSE\")"
	puts $fout ")"
	puts $fout "inst_ibufds"
	puts $fout "("
	puts $fout "  .O(clk),"
	puts $fout "  .I(CLK_P),"
	puts $fout "  .IB(CLK_N)"
	puts $fout ");"
} else {
	puts $fout "module MOD_HW"
	puts $fout "("
	puts $fout "  input clk"
	puts $fout ");"
}
puts $fout ""
puts $fout "(* dont_touch=\"true\" *) wire rst;"
puts $fout "(* dont_touch=\"true\" *) wire start;"
puts $fout "(* dont_touch=\"true\" *) wire ch_gen;"
puts $fout "(* dont_touch=\"true\" *) wire transition;"
puts $fout "(* dont_touch=\"true\" *) wire rsp_capture;"
puts $fout "(* dont_touch=\"true\" *) wire \[$CHPORT:0\]ch_seed;"
puts $fout "(* dont_touch=\"true\" *) wire \[$CHPORT:0\]ch;"
puts $fout "(* dont_touch=\"true\" *) wire \[$CHPORT:0\]ch_buf;"
puts $fout "(* dont_touch=\"true\" *) wire \[$ADJPORT:0\]adj0;"
puts $fout "(* dont_touch=\"true\" *) wire \[$ADJPORT:0\]adj0_buf;"
puts $fout "(* dont_touch=\"true\" *) wire \[$ADJPORT:0\]adj1;"
puts $fout "(* dont_touch=\"true\" *) wire \[$ADJPORT:0\]adj1_buf;"
puts $fout "(* dont_touch=\"true\" *) wire rsp;"
puts $fout "(* dont_touch=\"true\" *) wire rsp_buf;"
puts $fout ""
puts $fout "(* dont_touch = \"true\" *) MOD_BUF_CH_ADJ buf_ch_adj(clk,ch,adj0,adj1,ch_buf,adj0_buf,adj1_buf);"
puts $fout "(* dont_touch = \"true\" *) MOD_CHCONTROL chcontrol(clk,rst,start,ch_gen,transition,rsp_capture);"
puts $fout "(* dont_touch = \"true\" *) MOD_LFSR lfsr(rst,ch_gen,ch_seed,ch);"
puts $fout "(* dont_touch = \"true\" *) MOD_APUF apuf(transition,ch_buf,adj0_buf,adj1_buf,rsp);"
puts $fout "(* dont_touch = \"true\" *) MOD_RSPCONTROL rspcontrol(rsp_capture,rsp,rsp_buf);"
puts $fout ""
puts $fout "vio inst_vio"
puts $fout "("
puts $fout "  .clk(clk),"
puts $fout "  .probe_in0(rsp_buf),"
puts $fout "  .probe_out0(rst),"
puts $fout "  .probe_out1(start),"
puts $fout "  .probe_out2(adj0),"
puts $fout "  .probe_out3(adj1),"
puts $fout "  .probe_out4(ch_seed)"
puts $fout ");"
puts $fout ""
puts $fout "ila inst_ila("
puts $fout "	.clk(clk),"
puts $fout "	.probe0(ch),"
puts $fout "	.probe1(rsp_buf),"
puts $fout "	.probe2(start)"
puts $fout ");"
puts $fout ""
puts $fout "endmodule"
close $fout
############add_files
add_files "$FOLDER_SOURCES/new/MOD_BLOCK.v"
add_files "$FOLDER_SOURCES/new/MOD_PATH.v"
add_files "$FOLDER_SOURCES/new/MOD_ARBITER.v"
add_files "$FOLDER_SOURCES/new/MOD_APUF.v"
add_files "$FOLDER_SOURCES/new/MOD_LFSR.v"
add_files "$FOLDER_SOURCES/new/MOD_CHCONTROL.v"
add_files "$FOLDER_SOURCES/new/MOD_RSPCONTROL.v"
add_files "$FOLDER_SOURCES/new/MOD_BUF_CH_ADJ.v"
add_files "$FOLDER_SOURCES/new/MOD_HW.v"
